//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package vcl

import (
	"unsafe"

	. "github.com/topxeq/govcl/vcl/api"
	. "github.com/topxeq/govcl/vcl/types"
)

type TGIFImage struct {
	IObject
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// CN: 创建一个新的对象。
// EN: Create a new object.
func NewGIFImage() *TGIFImage {
	g := new(TGIFImage)
	g.instance = GIFImage_Create()
	g.ptr = unsafe.Pointer(g.instance)
	// 不敢启用，因为不知道会发生什么...
	// runtime.SetFinalizer(g, (*TGIFImage).Free)
	return g
}

// CN: 动态转换一个已存在的对象实例。或者使用Obj.As().<目标对象>。
// EN: Dynamically convert an existing object instance. Or use Obj.As().<Target object>.
func AsGIFImage(obj interface{}) *TGIFImage {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TGIFImage{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// CN: 新建一个对象来自已经存在的对象实例指针。
// EN: Create a new object from an existing object instance pointer.
// Deprecated: use AsGIFImage.
func GIFImageFromInst(inst uintptr) *TGIFImage {
	return AsGIFImage(inst)
}

// CN: 新建一个对象来自已经存在的对象实例。
// EN: Create a new object from an existing object instance.
// Deprecated: use AsGIFImage.
func GIFImageFromObj(obj IObject) *TGIFImage {
	return AsGIFImage(obj)
}

// CN: 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// EN: Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsGIFImage.
func GIFImageFromUnsafePointer(ptr unsafe.Pointer) *TGIFImage {
	return AsGIFImage(ptr)
}

// -------------------------- Deprecated end --------------------------
// CN: 释放对象。
// EN: Free object.
func (g *TGIFImage) Free() {
	if g.instance != 0 {
		GIFImage_Free(g.instance)
		g.instance, g.ptr = 0, nullptr
	}
}

// CN: 返回对象实例指针。
// EN: Return object instance pointer.
func (g *TGIFImage) Instance() uintptr {
	return g.instance
}

// CN: 获取一个不安全的地址。
// EN: Get an unsafe address.
func (g *TGIFImage) UnsafeAddr() unsafe.Pointer {
	return g.ptr
}

// CN: 检测地址是否为空。
// EN: Check if the address is empty.
func (g *TGIFImage) IsValid() bool {
	return g.instance != 0
}

// CN: 检测当前对象是否继承自目标对象。
// EN: Checks whether the current object is inherited from the target object.
func (g *TGIFImage) Is() TIs {
	return TIs(g.instance)
}

// CN: 动态转换当前对象为目标对象。
// EN: Dynamically convert the current object to the target object.
//func (g *TGIFImage) As() TAs {
//    return TAs(g.instance)
//}

// CN: 获取类信息指针。
// EN: Get class information pointer.
func TGIFImageClass() TClass {
	return GIFImage_StaticClassType()
}

// CN: 保存至流。
// EN: .
func (g *TGIFImage) SaveToStream(Stream IObject) {
	GIFImage_SaveToStream(g.instance, CheckPtr(Stream))
}

// CN: 文件流加载。
// EN: .
func (g *TGIFImage) LoadFromStream(Stream IObject) {
	GIFImage_LoadFromStream(g.instance, CheckPtr(Stream))
}

// CN: 清除。
// EN: .
func (g *TGIFImage) Clear() {
	GIFImage_Clear(g.instance)
}

// CN: 复制一个对象，如果对象实现了此方法的话。
// EN: Copy an object, if the object implements this method.
func (g *TGIFImage) Assign(Source IObject) {
	GIFImage_Assign(g.instance, CheckPtr(Source))
}

// CN: 与一个对象进行比较。
// EN: Compare with an object.
func (g *TGIFImage) Equals(Obj IObject) bool {
	return GIFImage_Equals(g.instance, CheckPtr(Obj))
}

// CN: 从文件加载。
// EN: .
func (g *TGIFImage) LoadFromFile(Filename string) {
	GIFImage_LoadFromFile(g.instance, Filename)
}

// CN: 保存至文件。
// EN: .
func (g *TGIFImage) SaveToFile(Filename string) {
	GIFImage_SaveToFile(g.instance, Filename)
}

func (g *TGIFImage) SetSize(AWidth int32, AHeight int32) {
	GIFImage_SetSize(g.instance, AWidth, AHeight)
}

// CN: 获取类名路径。
// EN: Get the class name path.
func (g *TGIFImage) GetNamePath() string {
	return GIFImage_GetNamePath(g.instance)
}

// CN: 获取类的类型信息。
// EN: Get class type information.
func (g *TGIFImage) ClassType() TClass {
	return GIFImage_ClassType(g.instance)
}

// CN: 获取当前对象类名称。
// EN: Get the current object class name.
func (g *TGIFImage) ClassName() string {
	return GIFImage_ClassName(g.instance)
}

// CN: 获取当前对象实例大小。
// EN: Get the current object instance size.
func (g *TGIFImage) InstanceSize() int32 {
	return GIFImage_InstanceSize(g.instance)
}

// CN: 判断当前类是否继承自指定类。
// EN: Determine whether the current class inherits from the specified class.
func (g *TGIFImage) InheritsFrom(AClass TClass) bool {
	return GIFImage_InheritsFrom(g.instance, AClass)
}

// CN: 获取类的哈希值。
// EN: Get the hash value of the class.
func (g *TGIFImage) GetHashCode() int32 {
	return GIFImage_GetHashCode(g.instance)
}

// CN: 文本类信息。
// EN: Text information.
func (g *TGIFImage) ToString() string {
	return GIFImage_ToString(g.instance)
}

func (g *TGIFImage) BitsPerPixel() int32 {
	return GIFImage_GetBitsPerPixel(g.instance)
}

func (g *TGIFImage) Empty() bool {
	return GIFImage_GetEmpty(g.instance)
}

// CN: 获取高度。
// EN: Get height.
func (g *TGIFImage) Height() int32 {
	return GIFImage_GetHeight(g.instance)
}

// CN: 设置高度。
// EN: Set height.
func (g *TGIFImage) SetHeight(value int32) {
	GIFImage_SetHeight(g.instance, value)
}

// CN: 获取修改。
// EN: Get modified.
func (g *TGIFImage) Modified() bool {
	return GIFImage_GetModified(g.instance)
}

// CN: 设置修改。
// EN: Set modified.
func (g *TGIFImage) SetModified(value bool) {
	GIFImage_SetModified(g.instance, value)
}

func (g *TGIFImage) Palette() HPALETTE {
	return GIFImage_GetPalette(g.instance)
}

func (g *TGIFImage) SetPalette(value HPALETTE) {
	GIFImage_SetPalette(g.instance, value)
}

func (g *TGIFImage) PaletteModified() bool {
	return GIFImage_GetPaletteModified(g.instance)
}

func (g *TGIFImage) SetPaletteModified(value bool) {
	GIFImage_SetPaletteModified(g.instance, value)
}

// CN: 获取透明。
// EN: Get transparent.
func (g *TGIFImage) Transparent() bool {
	return GIFImage_GetTransparent(g.instance)
}

// CN: 获取宽度。
// EN: Get width.
func (g *TGIFImage) Width() int32 {
	return GIFImage_GetWidth(g.instance)
}

// CN: 设置宽度。
// EN: Set width.
func (g *TGIFImage) SetWidth(value int32) {
	GIFImage_SetWidth(g.instance, value)
}

// CN: 设置改变事件。
// EN: Set changed event.
func (g *TGIFImage) SetOnChange(fn *TNotifyEvent) {
	GIFImage_SetOnChange(g.instance, fn)
}
