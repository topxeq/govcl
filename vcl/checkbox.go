//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package vcl

import (
	"unsafe"

	. "github.com/topxeq/govcl/vcl/api"
	. "github.com/topxeq/govcl/vcl/types"
)

type TCheckBox struct {
	IWinControl
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// CN: 创建一个新的对象。
// EN: Create a new object.
func NewCheckBox(owner IComponent) *TCheckBox {
	c := new(TCheckBox)
	c.instance = CheckBox_Create(CheckPtr(owner))
	c.ptr = unsafe.Pointer(c.instance)
	// 不敢启用，因为不知道会发生什么...
	// runtime.SetFinalizer(c, (*TCheckBox).Free)
	return c
}

// CN: 动态转换一个已存在的对象实例。或者使用Obj.As().<目标对象>。
// EN: Dynamically convert an existing object instance. Or use Obj.As().<Target object>.
func AsCheckBox(obj interface{}) *TCheckBox {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TCheckBox{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// CN: 新建一个对象来自已经存在的对象实例指针。
// EN: Create a new object from an existing object instance pointer.
// Deprecated: use AsCheckBox.
func CheckBoxFromInst(inst uintptr) *TCheckBox {
	return AsCheckBox(inst)
}

// CN: 新建一个对象来自已经存在的对象实例。
// EN: Create a new object from an existing object instance.
// Deprecated: use AsCheckBox.
func CheckBoxFromObj(obj IObject) *TCheckBox {
	return AsCheckBox(obj)
}

// CN: 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// EN: Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsCheckBox.
func CheckBoxFromUnsafePointer(ptr unsafe.Pointer) *TCheckBox {
	return AsCheckBox(ptr)
}

// -------------------------- Deprecated end --------------------------
// CN: 释放对象。
// EN: Free object.
func (c *TCheckBox) Free() {
	if c.instance != 0 {
		CheckBox_Free(c.instance)
		c.instance, c.ptr = 0, nullptr
	}
}

// CN: 返回对象实例指针。
// EN: Return object instance pointer.
func (c *TCheckBox) Instance() uintptr {
	return c.instance
}

// CN: 获取一个不安全的地址。
// EN: Get an unsafe address.
func (c *TCheckBox) UnsafeAddr() unsafe.Pointer {
	return c.ptr
}

// CN: 检测地址是否为空。
// EN: Check if the address is empty.
func (c *TCheckBox) IsValid() bool {
	return c.instance != 0
}

// CN: 检测当前对象是否继承自目标对象。
// EN: Checks whether the current object is inherited from the target object.
func (c *TCheckBox) Is() TIs {
	return TIs(c.instance)
}

// CN: 动态转换当前对象为目标对象。
// EN: Dynamically convert the current object to the target object.
//func (c *TCheckBox) As() TAs {
//    return TAs(c.instance)
//}

// CN: 获取类信息指针。
// EN: Get class information pointer.
func TCheckBoxClass() TClass {
	return CheckBox_StaticClassType()
}

// CN: 是否可以获得焦点。
// EN: .
func (c *TCheckBox) CanFocus() bool {
	return CheckBox_CanFocus(c.instance)
}

// CN: 返回是否包含指定控件。
// EN: it's contain a specified control.
func (c *TCheckBox) ContainsControl(Control IControl) bool {
	return CheckBox_ContainsControl(c.instance, CheckPtr(Control))
}

// CN: 返回指定坐标及相关属性位置控件。
// EN: Returns the specified coordinate and the relevant attribute position control..
func (c *TCheckBox) ControlAtPos(Pos TPoint, AllowDisabled bool, AllowWinControls bool, AllLevels bool) *TControl {
	return AsControl(CheckBox_ControlAtPos(c.instance, Pos, AllowDisabled, AllowWinControls, AllLevels))
}

// CN: 禁用控件的对齐。
// EN: Disable control alignment.
func (c *TCheckBox) DisableAlign() {
	CheckBox_DisableAlign(c.instance)
}

// CN: 启用控件对齐。
// EN: Enabled control alignment.
func (c *TCheckBox) EnableAlign() {
	CheckBox_EnableAlign(c.instance)
}

// CN: 查找子控件。
// EN: Find sub controls.
func (c *TCheckBox) FindChildControl(ControlName string) *TControl {
	return AsControl(CheckBox_FindChildControl(c.instance, ControlName))
}

func (c *TCheckBox) FlipChildren(AllLevels bool) {
	CheckBox_FlipChildren(c.instance, AllLevels)
}

// CN: 返回是否获取焦点。
// EN: Return to get focus.
func (c *TCheckBox) Focused() bool {
	return CheckBox_Focused(c.instance)
}

// CN: 句柄是否已经分配。
// EN: Is the handle already allocated.
func (c *TCheckBox) HandleAllocated() bool {
	return CheckBox_HandleAllocated(c.instance)
}

// CN: 插入一个控件。
// EN: Insert a control.
func (c *TCheckBox) InsertControl(AControl IControl) {
	CheckBox_InsertControl(c.instance, CheckPtr(AControl))
}

// CN: 要求重绘。
// EN: Redraw.
func (c *TCheckBox) Invalidate() {
	CheckBox_Invalidate(c.instance)
}

// CN: 移除一个控件。
// EN: Remove a control.
func (c *TCheckBox) RemoveControl(AControl IControl) {
	CheckBox_RemoveControl(c.instance, CheckPtr(AControl))
}

// CN: 重新对齐。
// EN: Realign.
func (c *TCheckBox) Realign() {
	CheckBox_Realign(c.instance)
}

// CN: 重绘。
// EN: Repaint.
func (c *TCheckBox) Repaint() {
	CheckBox_Repaint(c.instance)
}

// CN: 按比例缩放。
// EN: Scale by.
func (c *TCheckBox) ScaleBy(M int32, D int32) {
	CheckBox_ScaleBy(c.instance, M, D)
}

// CN: 滚动至指定位置。
// EN: Scroll by.
func (c *TCheckBox) ScrollBy(DeltaX int32, DeltaY int32) {
	CheckBox_ScrollBy(c.instance, DeltaX, DeltaY)
}

// CN: 设置组件边界。
// EN: Set component boundaries.
func (c *TCheckBox) SetBounds(ALeft int32, ATop int32, AWidth int32, AHeight int32) {
	CheckBox_SetBounds(c.instance, ALeft, ATop, AWidth, AHeight)
}

// CN: 设置控件焦点。
// EN: Set control focus.
func (c *TCheckBox) SetFocus() {
	CheckBox_SetFocus(c.instance)
}

// CN: 控件更新。
// EN: Update.
func (c *TCheckBox) Update() {
	CheckBox_Update(c.instance)
}

// CN: 将控件置于最前。
// EN: Bring the control to the front.
func (c *TCheckBox) BringToFront() {
	CheckBox_BringToFront(c.instance)
}

// CN: 将客户端坐标转为绝对的屏幕坐标。
// EN: Convert client coordinates to absolute screen coordinates.
func (c *TCheckBox) ClientToScreen(Point TPoint) TPoint {
	return CheckBox_ClientToScreen(c.instance, Point)
}

// CN: 将客户端坐标转为父容器坐标。
// EN: Convert client coordinates to parent container coordinates.
func (c *TCheckBox) ClientToParent(Point TPoint, AParent IWinControl) TPoint {
	return CheckBox_ClientToParent(c.instance, Point, CheckPtr(AParent))
}

// CN: 是否在拖拽中。
// EN: Is it in the middle of dragging.
func (c *TCheckBox) Dragging() bool {
	return CheckBox_Dragging(c.instance)
}

// CN: 是否有父容器。
// EN: Is there a parent container.
func (c *TCheckBox) HasParent() bool {
	return CheckBox_HasParent(c.instance)
}

// CN: 隐藏控件。
// EN: Hidden control.
func (c *TCheckBox) Hide() {
	CheckBox_Hide(c.instance)
}

// CN: 发送一个消息。
// EN: Send a message.
func (c *TCheckBox) Perform(Msg uint32, WParam uintptr, LParam int) int {
	return CheckBox_Perform(c.instance, Msg, WParam, LParam)
}

// CN: 刷新控件。
// EN: Refresh control.
func (c *TCheckBox) Refresh() {
	CheckBox_Refresh(c.instance)
}

// CN: 将屏幕坐标转为客户端坐标。
// EN: Convert screen coordinates to client coordinates.
func (c *TCheckBox) ScreenToClient(Point TPoint) TPoint {
	return CheckBox_ScreenToClient(c.instance, Point)
}

// CN: 将父容器坐标转为客户端坐标。
// EN: Convert parent container coordinates to client coordinates.
func (c *TCheckBox) ParentToClient(Point TPoint, AParent IWinControl) TPoint {
	return CheckBox_ParentToClient(c.instance, Point, CheckPtr(AParent))
}

// CN: 控件至于最后面。
// EN: The control is placed at the end.
func (c *TCheckBox) SendToBack() {
	CheckBox_SendToBack(c.instance)
}

// CN: 显示控件。
// EN: Show control.
func (c *TCheckBox) Show() {
	CheckBox_Show(c.instance)
}

// CN: 获取控件的字符，如果有。
// EN: Get the characters of the control, if any.
func (c *TCheckBox) GetTextBuf(Buffer *string, BufSize int32) int32 {
	return CheckBox_GetTextBuf(c.instance, Buffer, BufSize)
}

// CN: 获取控件的字符长，如果有。
// EN: Get the character length of the control, if any.
func (c *TCheckBox) GetTextLen() int32 {
	return CheckBox_GetTextLen(c.instance)
}

// CN: 设置控件字符，如果有。
// EN: Set control characters, if any.
func (c *TCheckBox) SetTextBuf(Buffer string) {
	CheckBox_SetTextBuf(c.instance, Buffer)
}

// CN: 查找指定名称的组件。
// EN: Find the component with the specified name.
func (c *TCheckBox) FindComponent(AName string) *TComponent {
	return AsComponent(CheckBox_FindComponent(c.instance, AName))
}

// CN: 获取类名路径。
// EN: Get the class name path.
func (c *TCheckBox) GetNamePath() string {
	return CheckBox_GetNamePath(c.instance)
}

// CN: 复制一个对象，如果对象实现了此方法的话。
// EN: Copy an object, if the object implements this method.
func (c *TCheckBox) Assign(Source IObject) {
	CheckBox_Assign(c.instance, CheckPtr(Source))
}

// CN: 获取类的类型信息。
// EN: Get class type information.
func (c *TCheckBox) ClassType() TClass {
	return CheckBox_ClassType(c.instance)
}

// CN: 获取当前对象类名称。
// EN: Get the current object class name.
func (c *TCheckBox) ClassName() string {
	return CheckBox_ClassName(c.instance)
}

// CN: 获取当前对象实例大小。
// EN: Get the current object instance size.
func (c *TCheckBox) InstanceSize() int32 {
	return CheckBox_InstanceSize(c.instance)
}

// CN: 判断当前类是否继承自指定类。
// EN: Determine whether the current class inherits from the specified class.
func (c *TCheckBox) InheritsFrom(AClass TClass) bool {
	return CheckBox_InheritsFrom(c.instance, AClass)
}

// CN: 与一个对象进行比较。
// EN: Compare with an object.
func (c *TCheckBox) Equals(Obj IObject) bool {
	return CheckBox_Equals(c.instance, CheckPtr(Obj))
}

// CN: 获取类的哈希值。
// EN: Get the hash value of the class.
func (c *TCheckBox) GetHashCode() int32 {
	return CheckBox_GetHashCode(c.instance)
}

// CN: 文本类信息。
// EN: Text information.
func (c *TCheckBox) ToString() string {
	return CheckBox_ToString(c.instance)
}

func (c *TCheckBox) AnchorToNeighbour(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	CheckBox_AnchorToNeighbour(c.instance, ASide, ASpace, CheckPtr(ASibling))
}

func (c *TCheckBox) AnchorParallel(ASide TAnchorKind, ASpace int32, ASibling IControl) {
	CheckBox_AnchorParallel(c.instance, ASide, ASpace, CheckPtr(ASibling))
}

// CN: 置于指定控件的横向中心。
// EN: .
func (c *TCheckBox) AnchorHorizontalCenterTo(ASibling IControl) {
	CheckBox_AnchorHorizontalCenterTo(c.instance, CheckPtr(ASibling))
}

// CN: 置于指定控件的纵向中心。
// EN: .
func (c *TCheckBox) AnchorVerticalCenterTo(ASibling IControl) {
	CheckBox_AnchorVerticalCenterTo(c.instance, CheckPtr(ASibling))
}

func (c *TCheckBox) AnchorAsAlign(ATheAlign TAlign, ASpace int32) {
	CheckBox_AnchorAsAlign(c.instance, ATheAlign, ASpace)
}

func (c *TCheckBox) AnchorClient(ASpace int32) {
	CheckBox_AnchorClient(c.instance, ASpace)
}

func (c *TCheckBox) Action() *TAction {
	return AsAction(CheckBox_GetAction(c.instance))
}

func (c *TCheckBox) SetAction(value IComponent) {
	CheckBox_SetAction(c.instance, CheckPtr(value))
}

// CN: 获取控件自动调整。
// EN: Get Control automatically adjusts.
func (c *TCheckBox) Align() TAlign {
	return CheckBox_GetAlign(c.instance)
}

// CN: 设置控件自动调整。
// EN: Set Control automatically adjusts.
func (c *TCheckBox) SetAlign(value TAlign) {
	CheckBox_SetAlign(c.instance, value)
}

// CN: 获取文字对齐。
// EN: Get Text alignment.
func (c *TCheckBox) Alignment() TLeftRight {
	return CheckBox_GetAlignment(c.instance)
}

// CN: 设置文字对齐。
// EN: Set Text alignment.
func (c *TCheckBox) SetAlignment(value TLeftRight) {
	CheckBox_SetAlignment(c.instance, value)
}

func (c *TCheckBox) AllowGrayed() bool {
	return CheckBox_GetAllowGrayed(c.instance)
}

func (c *TCheckBox) SetAllowGrayed(value bool) {
	CheckBox_SetAllowGrayed(c.instance, value)
}

// CN: 获取四个角位置的锚点。
// EN: .
func (c *TCheckBox) Anchors() TAnchors {
	return CheckBox_GetAnchors(c.instance)
}

// CN: 设置四个角位置的锚点。
// EN: .
func (c *TCheckBox) SetAnchors(value TAnchors) {
	CheckBox_SetAnchors(c.instance, value)
}

func (c *TCheckBox) BiDiMode() TBiDiMode {
	return CheckBox_GetBiDiMode(c.instance)
}

func (c *TCheckBox) SetBiDiMode(value TBiDiMode) {
	CheckBox_SetBiDiMode(c.instance, value)
}

// CN: 获取控件标题。
// EN: Get the control title.
func (c *TCheckBox) Caption() string {
	return CheckBox_GetCaption(c.instance)
}

// CN: 设置控件标题。
// EN: Set the control title.
func (c *TCheckBox) SetCaption(value string) {
	CheckBox_SetCaption(c.instance, value)
}

// CN: 获取是否选中。
// EN: .
func (c *TCheckBox) Checked() bool {
	return CheckBox_GetChecked(c.instance)
}

// CN: 设置是否选中。
// EN: .
func (c *TCheckBox) SetChecked(value bool) {
	CheckBox_SetChecked(c.instance, value)
}

// CN: 获取颜色。
// EN: Get color.
func (c *TCheckBox) Color() TColor {
	return CheckBox_GetColor(c.instance)
}

// CN: 设置颜色。
// EN: Set color.
func (c *TCheckBox) SetColor(value TColor) {
	CheckBox_SetColor(c.instance, value)
}

// CN: 获取约束控件大小。
// EN: .
func (c *TCheckBox) Constraints() *TSizeConstraints {
	return AsSizeConstraints(CheckBox_GetConstraints(c.instance))
}

// CN: 设置约束控件大小。
// EN: .
func (c *TCheckBox) SetConstraints(value *TSizeConstraints) {
	CheckBox_SetConstraints(c.instance, CheckPtr(value))
}

// CN: 获取设置控件双缓冲。
// EN: Get Set control double buffering.
func (c *TCheckBox) DoubleBuffered() bool {
	return CheckBox_GetDoubleBuffered(c.instance)
}

// CN: 设置设置控件双缓冲。
// EN: Set Set control double buffering.
func (c *TCheckBox) SetDoubleBuffered(value bool) {
	CheckBox_SetDoubleBuffered(c.instance, value)
}

// CN: 获取设置控件拖拽时的光标。
// EN: Get Set the cursor when the control is dragged.
func (c *TCheckBox) DragCursor() TCursor {
	return CheckBox_GetDragCursor(c.instance)
}

// CN: 设置设置控件拖拽时的光标。
// EN: Set Set the cursor when the control is dragged.
func (c *TCheckBox) SetDragCursor(value TCursor) {
	CheckBox_SetDragCursor(c.instance, value)
}

// CN: 获取拖拽方式。
// EN: Get Drag and drop.
func (c *TCheckBox) DragKind() TDragKind {
	return CheckBox_GetDragKind(c.instance)
}

// CN: 设置拖拽方式。
// EN: Set Drag and drop.
func (c *TCheckBox) SetDragKind(value TDragKind) {
	CheckBox_SetDragKind(c.instance, value)
}

// CN: 获取拖拽模式。
// EN: Get Drag mode.
func (c *TCheckBox) DragMode() TDragMode {
	return CheckBox_GetDragMode(c.instance)
}

// CN: 设置拖拽模式。
// EN: Set Drag mode.
func (c *TCheckBox) SetDragMode(value TDragMode) {
	CheckBox_SetDragMode(c.instance, value)
}

// CN: 获取控件启用。
// EN: Get the control enabled.
func (c *TCheckBox) Enabled() bool {
	return CheckBox_GetEnabled(c.instance)
}

// CN: 设置控件启用。
// EN: Set the control enabled.
func (c *TCheckBox) SetEnabled(value bool) {
	CheckBox_SetEnabled(c.instance, value)
}

// CN: 获取字体。
// EN: Get Font.
func (c *TCheckBox) Font() *TFont {
	return AsFont(CheckBox_GetFont(c.instance))
}

// CN: 设置字体。
// EN: Set Font.
func (c *TCheckBox) SetFont(value *TFont) {
	CheckBox_SetFont(c.instance, CheckPtr(value))
}

// CN: 获取父容器颜色。
// EN: Get parent color.
func (c *TCheckBox) ParentColor() bool {
	return CheckBox_GetParentColor(c.instance)
}

// CN: 设置父容器颜色。
// EN: Set parent color.
func (c *TCheckBox) SetParentColor(value bool) {
	CheckBox_SetParentColor(c.instance, value)
}

// CN: 获取父容器双缓冲。
// EN: Get Parent container double buffering.
func (c *TCheckBox) ParentDoubleBuffered() bool {
	return CheckBox_GetParentDoubleBuffered(c.instance)
}

// CN: 设置父容器双缓冲。
// EN: Set Parent container double buffering.
func (c *TCheckBox) SetParentDoubleBuffered(value bool) {
	CheckBox_SetParentDoubleBuffered(c.instance, value)
}

// CN: 获取父容器字体。
// EN: Get Parent container font.
func (c *TCheckBox) ParentFont() bool {
	return CheckBox_GetParentFont(c.instance)
}

// CN: 设置父容器字体。
// EN: Set Parent container font.
func (c *TCheckBox) SetParentFont(value bool) {
	CheckBox_SetParentFont(c.instance, value)
}

// CN: 获取以父容器的ShowHint属性为准。
// EN: .
func (c *TCheckBox) ParentShowHint() bool {
	return CheckBox_GetParentShowHint(c.instance)
}

// CN: 设置以父容器的ShowHint属性为准。
// EN: .
func (c *TCheckBox) SetParentShowHint(value bool) {
	CheckBox_SetParentShowHint(c.instance, value)
}

// CN: 获取右键菜单。
// EN: Get Right click menu.
func (c *TCheckBox) PopupMenu() *TPopupMenu {
	return AsPopupMenu(CheckBox_GetPopupMenu(c.instance))
}

// CN: 设置右键菜单。
// EN: Set Right click menu.
func (c *TCheckBox) SetPopupMenu(value IComponent) {
	CheckBox_SetPopupMenu(c.instance, CheckPtr(value))
}

// CN: 获取显示鼠标悬停提示。
// EN: Get Show mouseover tips.
func (c *TCheckBox) ShowHint() bool {
	return CheckBox_GetShowHint(c.instance)
}

// CN: 设置显示鼠标悬停提示。
// EN: Set Show mouseover tips.
func (c *TCheckBox) SetShowHint(value bool) {
	CheckBox_SetShowHint(c.instance, value)
}

func (c *TCheckBox) State() TCheckBoxState {
	return CheckBox_GetState(c.instance)
}

func (c *TCheckBox) SetState(value TCheckBoxState) {
	CheckBox_SetState(c.instance, value)
}

// CN: 获取Tab切换顺序序号。
// EN: Get Tab switching sequence number.
func (c *TCheckBox) TabOrder() TTabOrder {
	return CheckBox_GetTabOrder(c.instance)
}

// CN: 设置Tab切换顺序序号。
// EN: Set Tab switching sequence number.
func (c *TCheckBox) SetTabOrder(value TTabOrder) {
	CheckBox_SetTabOrder(c.instance, value)
}

// CN: 获取Tab可停留。
// EN: Get Tab can stay.
func (c *TCheckBox) TabStop() bool {
	return CheckBox_GetTabStop(c.instance)
}

// CN: 设置Tab可停留。
// EN: Set Tab can stay.
func (c *TCheckBox) SetTabStop(value bool) {
	CheckBox_SetTabStop(c.instance, value)
}

// CN: 获取控件可视。
// EN: Get the control visible.
func (c *TCheckBox) Visible() bool {
	return CheckBox_GetVisible(c.instance)
}

// CN: 设置控件可视。
// EN: Set the control visible.
func (c *TCheckBox) SetVisible(value bool) {
	CheckBox_SetVisible(c.instance, value)
}

// CN: 设置控件单击事件。
// EN: Set control click event.
func (c *TCheckBox) SetOnClick(fn *TNotifyEvent) {
	CheckBox_SetOnClick(c.instance, fn)
}

// CN: 设置上下文弹出事件，一般是右键时弹出。
// EN: Set Context popup event, usually pop up when right click.
func (c *TCheckBox) SetOnContextPopup(fn *TContextPopupEvent) {
	CheckBox_SetOnContextPopup(c.instance, fn)
}

// CN: 设置拖拽下落事件。
// EN: Set Drag and drop event.
func (c *TCheckBox) SetOnDragDrop(fn *TDragDropEvent) {
	CheckBox_SetOnDragDrop(c.instance, fn)
}

// CN: 设置拖拽完成事件。
// EN: Set Drag and drop completion event.
func (c *TCheckBox) SetOnDragOver(fn *TDragOverEvent) {
	CheckBox_SetOnDragOver(c.instance, fn)
}

// CN: 设置拖拽结束。
// EN: Set End of drag.
func (c *TCheckBox) SetOnEndDrag(fn *TEndDragEvent) {
	CheckBox_SetOnEndDrag(c.instance, fn)
}

// CN: 设置焦点进入。
// EN: Set Focus entry.
func (c *TCheckBox) SetOnEnter(fn *TNotifyEvent) {
	CheckBox_SetOnEnter(c.instance, fn)
}

// CN: 设置焦点退出。
// EN: Set Focus exit.
func (c *TCheckBox) SetOnExit(fn *TNotifyEvent) {
	CheckBox_SetOnExit(c.instance, fn)
}

// CN: 设置键盘按键按下事件。
// EN: Set Keyboard button press event.
func (c *TCheckBox) SetOnKeyDown(fn *TKeyEvent) {
	CheckBox_SetOnKeyDown(c.instance, fn)
}

func (c *TCheckBox) SetOnKeyPress(fn *TKeyPressEvent) {
	CheckBox_SetOnKeyPress(c.instance, fn)
}

// CN: 设置键盘按键抬起事件。
// EN: Set Keyboard button lift event.
func (c *TCheckBox) SetOnKeyUp(fn *TKeyEvent) {
	CheckBox_SetOnKeyUp(c.instance, fn)
}

// CN: 设置鼠标按下事件。
// EN: Set Mouse down event.
func (c *TCheckBox) SetOnMouseDown(fn *TMouseEvent) {
	CheckBox_SetOnMouseDown(c.instance, fn)
}

// CN: 设置鼠标进入事件。
// EN: Set Mouse entry event.
func (c *TCheckBox) SetOnMouseEnter(fn *TNotifyEvent) {
	CheckBox_SetOnMouseEnter(c.instance, fn)
}

// CN: 设置鼠标离开事件。
// EN: Set Mouse leave event.
func (c *TCheckBox) SetOnMouseLeave(fn *TNotifyEvent) {
	CheckBox_SetOnMouseLeave(c.instance, fn)
}

// CN: 设置鼠标移动事件。
// EN: .
func (c *TCheckBox) SetOnMouseMove(fn *TMouseMoveEvent) {
	CheckBox_SetOnMouseMove(c.instance, fn)
}

// CN: 设置鼠标抬起事件。
// EN: Set Mouse lift event.
func (c *TCheckBox) SetOnMouseUp(fn *TMouseEvent) {
	CheckBox_SetOnMouseUp(c.instance, fn)
}

// CN: 获取依靠客户端总数。
// EN: .
func (c *TCheckBox) DockClientCount() int32 {
	return CheckBox_GetDockClientCount(c.instance)
}

// CN: 获取停靠站点。
// EN: Get Docking site.
func (c *TCheckBox) DockSite() bool {
	return CheckBox_GetDockSite(c.instance)
}

// CN: 设置停靠站点。
// EN: Set Docking site.
func (c *TCheckBox) SetDockSite(value bool) {
	CheckBox_SetDockSite(c.instance, value)
}

// CN: 获取鼠标是否在客户端，仅VCL有效。
// EN: Get Whether the mouse is on the client, only VCL is valid.
func (c *TCheckBox) MouseInClient() bool {
	return CheckBox_GetMouseInClient(c.instance)
}

// CN: 获取当前停靠的可视总数。
// EN: Get The total number of visible calls currently docked.
func (c *TCheckBox) VisibleDockClientCount() int32 {
	return CheckBox_GetVisibleDockClientCount(c.instance)
}

// CN: 获取画刷对象。
// EN: Get Brush.
func (c *TCheckBox) Brush() *TBrush {
	return AsBrush(CheckBox_GetBrush(c.instance))
}

// CN: 获取子控件数。
// EN: Get Number of child controls.
func (c *TCheckBox) ControlCount() int32 {
	return CheckBox_GetControlCount(c.instance)
}

// CN: 获取控件句柄。
// EN: Get Control handle.
func (c *TCheckBox) Handle() HWND {
	return CheckBox_GetHandle(c.instance)
}

// CN: 获取父容器句柄。
// EN: Get Parent container handle.
func (c *TCheckBox) ParentWindow() HWND {
	return CheckBox_GetParentWindow(c.instance)
}

// CN: 设置父容器句柄。
// EN: Set Parent container handle.
func (c *TCheckBox) SetParentWindow(value HWND) {
	CheckBox_SetParentWindow(c.instance, value)
}

// CN: 获取使用停靠管理。
// EN: .
func (c *TCheckBox) UseDockManager() bool {
	return CheckBox_GetUseDockManager(c.instance)
}

// CN: 设置使用停靠管理。
// EN: .
func (c *TCheckBox) SetUseDockManager(value bool) {
	CheckBox_SetUseDockManager(c.instance, value)
}

func (c *TCheckBox) BoundsRect() TRect {
	return CheckBox_GetBoundsRect(c.instance)
}

func (c *TCheckBox) SetBoundsRect(value TRect) {
	CheckBox_SetBoundsRect(c.instance, value)
}

// CN: 获取客户区高度。
// EN: Get client height.
func (c *TCheckBox) ClientHeight() int32 {
	return CheckBox_GetClientHeight(c.instance)
}

// CN: 设置客户区高度。
// EN: Set client height.
func (c *TCheckBox) SetClientHeight(value int32) {
	CheckBox_SetClientHeight(c.instance, value)
}

func (c *TCheckBox) ClientOrigin() TPoint {
	return CheckBox_GetClientOrigin(c.instance)
}

// CN: 获取客户区矩形。
// EN: Get client rectangle.
func (c *TCheckBox) ClientRect() TRect {
	return CheckBox_GetClientRect(c.instance)
}

// CN: 获取客户区宽度。
// EN: Get client width.
func (c *TCheckBox) ClientWidth() int32 {
	return CheckBox_GetClientWidth(c.instance)
}

// CN: 设置客户区宽度。
// EN: Set client width.
func (c *TCheckBox) SetClientWidth(value int32) {
	CheckBox_SetClientWidth(c.instance, value)
}

// CN: 获取控件状态。
// EN: Get control state.
func (c *TCheckBox) ControlState() TControlState {
	return CheckBox_GetControlState(c.instance)
}

// CN: 设置控件状态。
// EN: Set control state.
func (c *TCheckBox) SetControlState(value TControlState) {
	CheckBox_SetControlState(c.instance, value)
}

// CN: 获取控件样式。
// EN: Get control style.
func (c *TCheckBox) ControlStyle() TControlStyle {
	return CheckBox_GetControlStyle(c.instance)
}

// CN: 设置控件样式。
// EN: Set control style.
func (c *TCheckBox) SetControlStyle(value TControlStyle) {
	CheckBox_SetControlStyle(c.instance, value)
}

func (c *TCheckBox) Floating() bool {
	return CheckBox_GetFloating(c.instance)
}

// CN: 获取控件父容器。
// EN: Get control parent container.
func (c *TCheckBox) Parent() *TWinControl {
	return AsWinControl(CheckBox_GetParent(c.instance))
}

// CN: 设置控件父容器。
// EN: Set control parent container.
func (c *TCheckBox) SetParent(value IWinControl) {
	CheckBox_SetParent(c.instance, CheckPtr(value))
}

// CN: 获取左边位置。
// EN: Get Left position.
func (c *TCheckBox) Left() int32 {
	return CheckBox_GetLeft(c.instance)
}

// CN: 设置左边位置。
// EN: Set Left position.
func (c *TCheckBox) SetLeft(value int32) {
	CheckBox_SetLeft(c.instance, value)
}

// CN: 获取顶边位置。
// EN: Get Top position.
func (c *TCheckBox) Top() int32 {
	return CheckBox_GetTop(c.instance)
}

// CN: 设置顶边位置。
// EN: Set Top position.
func (c *TCheckBox) SetTop(value int32) {
	CheckBox_SetTop(c.instance, value)
}

// CN: 获取宽度。
// EN: Get width.
func (c *TCheckBox) Width() int32 {
	return CheckBox_GetWidth(c.instance)
}

// CN: 设置宽度。
// EN: Set width.
func (c *TCheckBox) SetWidth(value int32) {
	CheckBox_SetWidth(c.instance, value)
}

// CN: 获取高度。
// EN: Get height.
func (c *TCheckBox) Height() int32 {
	return CheckBox_GetHeight(c.instance)
}

// CN: 设置高度。
// EN: Set height.
func (c *TCheckBox) SetHeight(value int32) {
	CheckBox_SetHeight(c.instance, value)
}

// CN: 获取控件光标。
// EN: Get control cursor.
func (c *TCheckBox) Cursor() TCursor {
	return CheckBox_GetCursor(c.instance)
}

// CN: 设置控件光标。
// EN: Set control cursor.
func (c *TCheckBox) SetCursor(value TCursor) {
	CheckBox_SetCursor(c.instance, value)
}

// CN: 获取组件鼠标悬停提示。
// EN: Get component mouse hints.
func (c *TCheckBox) Hint() string {
	return CheckBox_GetHint(c.instance)
}

// CN: 设置组件鼠标悬停提示。
// EN: Set component mouse hints.
func (c *TCheckBox) SetHint(value string) {
	CheckBox_SetHint(c.instance, value)
}

// CN: 获取组件总数。
// EN: Get the total number of components.
func (c *TCheckBox) ComponentCount() int32 {
	return CheckBox_GetComponentCount(c.instance)
}

// CN: 获取组件索引。
// EN: Get component index.
func (c *TCheckBox) ComponentIndex() int32 {
	return CheckBox_GetComponentIndex(c.instance)
}

// CN: 设置组件索引。
// EN: Set component index.
func (c *TCheckBox) SetComponentIndex(value int32) {
	CheckBox_SetComponentIndex(c.instance, value)
}

// CN: 获取组件所有者。
// EN: Get component owner.
func (c *TCheckBox) Owner() *TComponent {
	return AsComponent(CheckBox_GetOwner(c.instance))
}

// CN: 获取组件名称。
// EN: Get the component name.
func (c *TCheckBox) Name() string {
	return CheckBox_GetName(c.instance)
}

// CN: 设置组件名称。
// EN: Set the component name.
func (c *TCheckBox) SetName(value string) {
	CheckBox_SetName(c.instance, value)
}

// CN: 获取对象标记。
// EN: Get the control tag.
func (c *TCheckBox) Tag() int {
	return CheckBox_GetTag(c.instance)
}

// CN: 设置对象标记。
// EN: Set the control tag.
func (c *TCheckBox) SetTag(value int) {
	CheckBox_SetTag(c.instance, value)
}

// CN: 获取左边锚点。
// EN: .
func (c *TCheckBox) AnchorSideLeft() *TAnchorSide {
	return AsAnchorSide(CheckBox_GetAnchorSideLeft(c.instance))
}

// CN: 设置左边锚点。
// EN: .
func (c *TCheckBox) SetAnchorSideLeft(value *TAnchorSide) {
	CheckBox_SetAnchorSideLeft(c.instance, CheckPtr(value))
}

// CN: 获取顶边锚点。
// EN: .
func (c *TCheckBox) AnchorSideTop() *TAnchorSide {
	return AsAnchorSide(CheckBox_GetAnchorSideTop(c.instance))
}

// CN: 设置顶边锚点。
// EN: .
func (c *TCheckBox) SetAnchorSideTop(value *TAnchorSide) {
	CheckBox_SetAnchorSideTop(c.instance, CheckPtr(value))
}

// CN: 获取右边锚点。
// EN: .
func (c *TCheckBox) AnchorSideRight() *TAnchorSide {
	return AsAnchorSide(CheckBox_GetAnchorSideRight(c.instance))
}

// CN: 设置右边锚点。
// EN: .
func (c *TCheckBox) SetAnchorSideRight(value *TAnchorSide) {
	CheckBox_SetAnchorSideRight(c.instance, CheckPtr(value))
}

// CN: 获取底边锚点。
// EN: .
func (c *TCheckBox) AnchorSideBottom() *TAnchorSide {
	return AsAnchorSide(CheckBox_GetAnchorSideBottom(c.instance))
}

// CN: 设置底边锚点。
// EN: .
func (c *TCheckBox) SetAnchorSideBottom(value *TAnchorSide) {
	CheckBox_SetAnchorSideBottom(c.instance, CheckPtr(value))
}

func (c *TCheckBox) ChildSizing() *TControlChildSizing {
	return AsControlChildSizing(CheckBox_GetChildSizing(c.instance))
}

func (c *TCheckBox) SetChildSizing(value *TControlChildSizing) {
	CheckBox_SetChildSizing(c.instance, CheckPtr(value))
}

// CN: 获取边框间距。
// EN: .
func (c *TCheckBox) BorderSpacing() *TControlBorderSpacing {
	return AsControlBorderSpacing(CheckBox_GetBorderSpacing(c.instance))
}

// CN: 设置边框间距。
// EN: .
func (c *TCheckBox) SetBorderSpacing(value *TControlBorderSpacing) {
	CheckBox_SetBorderSpacing(c.instance, CheckPtr(value))
}

// CN: 获取指定索引停靠客户端。
// EN: .
func (c *TCheckBox) DockClients(Index int32) *TControl {
	return AsControl(CheckBox_GetDockClients(c.instance, Index))
}

// CN: 获取指定索引子控件。
// EN: .
func (c *TCheckBox) Controls(Index int32) *TControl {
	return AsControl(CheckBox_GetControls(c.instance, Index))
}

// CN: 获取指定索引组件。
// EN: Get the specified index component.
func (c *TCheckBox) Components(AIndex int32) *TComponent {
	return AsComponent(CheckBox_GetComponents(c.instance, AIndex))
}

// CN: 获取锚侧面。
// EN: .
func (c *TCheckBox) AnchorSide(AKind TAnchorKind) *TAnchorSide {
	return AsAnchorSide(CheckBox_GetAnchorSide(c.instance, AKind))
}
