//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package vcl

import (
	"unsafe"

	. "github.com/topxeq/govcl/vcl/api"
	. "github.com/topxeq/govcl/vcl/types"
)

type TReplaceDialog struct {
	IComponent
	instance uintptr
	// 特殊情况下使用，主要应对Go的GC问题，与LCL没有太多关系。
	ptr unsafe.Pointer
}

// CN: 创建一个新的对象。
// EN: Create a new object.
func NewReplaceDialog(owner IComponent) *TReplaceDialog {
	r := new(TReplaceDialog)
	r.instance = ReplaceDialog_Create(CheckPtr(owner))
	r.ptr = unsafe.Pointer(r.instance)
	// 不敢启用，因为不知道会发生什么...
	// runtime.SetFinalizer(r, (*TReplaceDialog).Free)
	return r
}

// CN: 动态转换一个已存在的对象实例。或者使用Obj.As().<目标对象>。
// EN: Dynamically convert an existing object instance. Or use Obj.As().<Target object>.
func AsReplaceDialog(obj interface{}) *TReplaceDialog {
	instance, ptr := getInstance(obj)
	if instance == 0 {
		return nil
	}
	return &TReplaceDialog{instance: instance, ptr: ptr}
}

// -------------------------- Deprecated begin --------------------------
// CN: 新建一个对象来自已经存在的对象实例指针。
// EN: Create a new object from an existing object instance pointer.
// Deprecated: use AsReplaceDialog.
func ReplaceDialogFromInst(inst uintptr) *TReplaceDialog {
	return AsReplaceDialog(inst)
}

// CN: 新建一个对象来自已经存在的对象实例。
// EN: Create a new object from an existing object instance.
// Deprecated: use AsReplaceDialog.
func ReplaceDialogFromObj(obj IObject) *TReplaceDialog {
	return AsReplaceDialog(obj)
}

// CN: 新建一个对象来自不安全的地址。注意：使用此函数可能造成一些不明情况，慎用。
// EN: Create a new object from an unsecured address. Note: Using this function may cause some unclear situations and be used with caution..
// Deprecated: use AsReplaceDialog.
func ReplaceDialogFromUnsafePointer(ptr unsafe.Pointer) *TReplaceDialog {
	return AsReplaceDialog(ptr)
}

// -------------------------- Deprecated end --------------------------
// CN: 释放对象。
// EN: Free object.
func (r *TReplaceDialog) Free() {
	if r.instance != 0 {
		ReplaceDialog_Free(r.instance)
		r.instance, r.ptr = 0, nullptr
	}
}

// CN: 返回对象实例指针。
// EN: Return object instance pointer.
func (r *TReplaceDialog) Instance() uintptr {
	return r.instance
}

// CN: 获取一个不安全的地址。
// EN: Get an unsafe address.
func (r *TReplaceDialog) UnsafeAddr() unsafe.Pointer {
	return r.ptr
}

// CN: 检测地址是否为空。
// EN: Check if the address is empty.
func (r *TReplaceDialog) IsValid() bool {
	return r.instance != 0
}

// CN: 检测当前对象是否继承自目标对象。
// EN: Checks whether the current object is inherited from the target object.
func (r *TReplaceDialog) Is() TIs {
	return TIs(r.instance)
}

// CN: 动态转换当前对象为目标对象。
// EN: Dynamically convert the current object to the target object.
//func (r *TReplaceDialog) As() TAs {
//    return TAs(r.instance)
//}

// CN: 获取类信息指针。
// EN: Get class information pointer.
func TReplaceDialogClass() TClass {
	return ReplaceDialog_StaticClassType()
}

func (r *TReplaceDialog) CloseDialog() {
	ReplaceDialog_CloseDialog(r.instance)
}

// CN: 执行。
// EN: .
func (r *TReplaceDialog) Execute() bool {
	return ReplaceDialog_Execute(r.instance)
}

// CN: 查找指定名称的组件。
// EN: Find the component with the specified name.
func (r *TReplaceDialog) FindComponent(AName string) *TComponent {
	return AsComponent(ReplaceDialog_FindComponent(r.instance, AName))
}

// CN: 获取类名路径。
// EN: Get the class name path.
func (r *TReplaceDialog) GetNamePath() string {
	return ReplaceDialog_GetNamePath(r.instance)
}

// CN: 是否有父容器。
// EN: Is there a parent container.
func (r *TReplaceDialog) HasParent() bool {
	return ReplaceDialog_HasParent(r.instance)
}

// CN: 复制一个对象，如果对象实现了此方法的话。
// EN: Copy an object, if the object implements this method.
func (r *TReplaceDialog) Assign(Source IObject) {
	ReplaceDialog_Assign(r.instance, CheckPtr(Source))
}

// CN: 获取类的类型信息。
// EN: Get class type information.
func (r *TReplaceDialog) ClassType() TClass {
	return ReplaceDialog_ClassType(r.instance)
}

// CN: 获取当前对象类名称。
// EN: Get the current object class name.
func (r *TReplaceDialog) ClassName() string {
	return ReplaceDialog_ClassName(r.instance)
}

// CN: 获取当前对象实例大小。
// EN: Get the current object instance size.
func (r *TReplaceDialog) InstanceSize() int32 {
	return ReplaceDialog_InstanceSize(r.instance)
}

// CN: 判断当前类是否继承自指定类。
// EN: Determine whether the current class inherits from the specified class.
func (r *TReplaceDialog) InheritsFrom(AClass TClass) bool {
	return ReplaceDialog_InheritsFrom(r.instance, AClass)
}

// CN: 与一个对象进行比较。
// EN: Compare with an object.
func (r *TReplaceDialog) Equals(Obj IObject) bool {
	return ReplaceDialog_Equals(r.instance, CheckPtr(Obj))
}

// CN: 获取类的哈希值。
// EN: Get the hash value of the class.
func (r *TReplaceDialog) GetHashCode() int32 {
	return ReplaceDialog_GetHashCode(r.instance)
}

// CN: 文本类信息。
// EN: Text information.
func (r *TReplaceDialog) ToString() string {
	return ReplaceDialog_ToString(r.instance)
}

func (r *TReplaceDialog) ReplaceText() string {
	return ReplaceDialog_GetReplaceText(r.instance)
}

func (r *TReplaceDialog) SetReplaceText(value string) {
	ReplaceDialog_SetReplaceText(r.instance, value)
}

func (r *TReplaceDialog) SetOnReplace(fn *TNotifyEvent) {
	ReplaceDialog_SetOnReplace(r.instance, fn)
}

// CN: 获取左边位置。
// EN: Get Left position.
func (r *TReplaceDialog) Left() int32 {
	return ReplaceDialog_GetLeft(r.instance)
}

// CN: 设置左边位置。
// EN: Set Left position.
func (r *TReplaceDialog) SetLeft(value int32) {
	ReplaceDialog_SetLeft(r.instance, value)
}

func (r *TReplaceDialog) Position() TPoint {
	return ReplaceDialog_GetPosition(r.instance)
}

func (r *TReplaceDialog) SetPosition(value TPoint) {
	ReplaceDialog_SetPosition(r.instance, value)
}

// CN: 获取顶边位置。
// EN: Get Top position.
func (r *TReplaceDialog) Top() int32 {
	return ReplaceDialog_GetTop(r.instance)
}

// CN: 设置顶边位置。
// EN: Set Top position.
func (r *TReplaceDialog) SetTop(value int32) {
	ReplaceDialog_SetTop(r.instance, value)
}

func (r *TReplaceDialog) FindText() string {
	return ReplaceDialog_GetFindText(r.instance)
}

func (r *TReplaceDialog) SetFindText(value string) {
	ReplaceDialog_SetFindText(r.instance, value)
}

func (r *TReplaceDialog) Options() TFindOptions {
	return ReplaceDialog_GetOptions(r.instance)
}

func (r *TReplaceDialog) SetOptions(value TFindOptions) {
	ReplaceDialog_SetOptions(r.instance, value)
}

func (r *TReplaceDialog) SetOnFind(fn *TNotifyEvent) {
	ReplaceDialog_SetOnFind(r.instance, fn)
}

// CN: 获取控件句柄。
// EN: Get Control handle.
func (r *TReplaceDialog) Handle() HWND {
	return ReplaceDialog_GetHandle(r.instance)
}

func (r *TReplaceDialog) SetOnClose(fn *TNotifyEvent) {
	ReplaceDialog_SetOnClose(r.instance, fn)
}

// CN: 设置显示事件。
// EN: .
func (r *TReplaceDialog) SetOnShow(fn *TNotifyEvent) {
	ReplaceDialog_SetOnShow(r.instance, fn)
}

// CN: 获取组件总数。
// EN: Get the total number of components.
func (r *TReplaceDialog) ComponentCount() int32 {
	return ReplaceDialog_GetComponentCount(r.instance)
}

// CN: 获取组件索引。
// EN: Get component index.
func (r *TReplaceDialog) ComponentIndex() int32 {
	return ReplaceDialog_GetComponentIndex(r.instance)
}

// CN: 设置组件索引。
// EN: Set component index.
func (r *TReplaceDialog) SetComponentIndex(value int32) {
	ReplaceDialog_SetComponentIndex(r.instance, value)
}

// CN: 获取组件所有者。
// EN: Get component owner.
func (r *TReplaceDialog) Owner() *TComponent {
	return AsComponent(ReplaceDialog_GetOwner(r.instance))
}

// CN: 获取组件名称。
// EN: Get the component name.
func (r *TReplaceDialog) Name() string {
	return ReplaceDialog_GetName(r.instance)
}

// CN: 设置组件名称。
// EN: Set the component name.
func (r *TReplaceDialog) SetName(value string) {
	ReplaceDialog_SetName(r.instance, value)
}

// CN: 获取对象标记。
// EN: Get the control tag.
func (r *TReplaceDialog) Tag() int {
	return ReplaceDialog_GetTag(r.instance)
}

// CN: 设置对象标记。
// EN: Set the control tag.
func (r *TReplaceDialog) SetTag(value int) {
	ReplaceDialog_SetTag(r.instance, value)
}

// CN: 获取指定索引组件。
// EN: Get the specified index component.
func (r *TReplaceDialog) Components(AIndex int32) *TComponent {
	return AsComponent(ReplaceDialog_GetComponents(r.instance, AIndex))
}
